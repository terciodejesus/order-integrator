# Order Integrator - Cursor Rules

## Project Context
Order Integrator é um sistema de integração de pedidos em NestJS que conecta a Prime Store com o sistema Bahn usando Clean Architecture e Domain-Driven Design. Sistema critical de produção que processa pedidos automaticamente entre plataformas.

## Architecture Patterns
- **Clean Architecture**: Domain (entities, ports) → Application (services) → Infrastructure (adapters, controllers)
- **Ports & Adapters**: OrderIntegrationPort, StorePort, AuthenticationPort com implementações específicas
- **Dependency Injection**: NestJS IoC com @Inject decorators para ports
- **Configuration**: @nestjs/config com tipagem forte e configuração por módulo

## Code Standards

### Naming Conventions
- Classes: PascalCase (`OrderIntegrationService`, `BahnOrderAdapter`)
- Methods/Variables: camelCase (`createOrder`, `cachedToken`)
- Files: kebab-case (`order-integration.service.ts`, `bahn-auth.adapter.ts`)
- Constants: UPPERCASE (`BAHN_BASE_URL`)
- Interfaces/Ports: PascalCase ending with Port (`OrderIntegrationPort`)

### File Organization
```
src/
├── domain/           # Business entities and contracts
│   ├── entities/     # Order, Customer, OrderItem, etc.
│   └── ports/        # Interfaces for external dependencies
├── application/      # Use cases and business logic
│   └── services/     # Application services (orchestration)
└── infra/           # External concerns
    ├── adapters/     # Port implementations (bahn/, prime/)
    └── http/         # Controllers, DTOs, mappers
```

### TypeScript Rules
- NEVER use `any` - always type everything
- Use strict mode TypeScript configuration
- Prefer interfaces for contracts, types for data structures
- Use JSDoc for public methods
- Import types with `import type` when possible

### Method Structure
```typescript
async methodName(param: Type): Promise<ReturnType> {
  // Input validation
  // Main logic (no blank lines within)
  // Error handling
  // Return statement
}
```

## Integration Patterns

### Authentication Caching
```typescript
// Always check token validity before API calls
if (!this.authentication.validateToken(this.cachedToken)) {
  const authResult = await this.authentication.authenticate(credentials);
  this.cachedToken = authResult.accessToken;
}
```

### Timeout Configuration
- Order creation (Bahn): 30s
- Notifications (Prime): 10s  
- Authentication: 5s (default)

### Error Handling Strategy
```typescript
try {
  // Main operation
  return successResult;
} catch (error) {
  if (error instanceof AxiosError) {
    // HTTP-specific handling by status code
    if (error.response?.status === 401) {
      // Token renewal logic
    }
    // Map to domain exceptions
  }
  throw new InternalServerErrorException();
}
```

### HTTP Status Code Mapping
- 401: Token expired → Renew authentication
- 400: Invalid data → Return validation error
- 422: Validation failure → Return detailed errors
- ECONNREFUSED/ETIMEDOUT: Service unavailable

## Service-Specific Patterns

### Bahn Integration
- JWT Bearer tokens with automatic renewal
- Order arrays in requests: `[bahnOrder]`
- 30s timeout for order creation
- Response format: `{ success: boolean, orderNumber?: string, errors?: ErrorDetail[] }`

### Prime Store Integration  
- API Key authentication via x-api-key header
- Webhook notifications for order success
- 10s timeout for notifications
- Webhook format: `{ data: { id }, timestamp, type: 'order.processed' }`

## Logging Standards
- Use Portuguese for user-facing messages and logs
- Include operation context: `Criando pedido no Bahn: ${orderNumber}`
- Error logs should include response data: `error.response?.data`
- Log levels: `this.logger.log()` for success, `.error()` for failures, `.warn()` for recoverable issues

## Testing Approach (When Implementing)
- Unit tests for each service and adapter
- Mock external dependencies (HttpService, ConfigService)
- Integration tests for complete flows
- E2E tests for API endpoints
- Minimum 80% coverage target

## Environment Configuration
```typescript
// Always use typed configuration interfaces
interface BahnConfig {
  baseUrl: string;
  username: string;
  password: string;
}

// Access via ConfigService with fallbacks
this.configService.get<BahnConfig>('bahn')?.baseUrl ?? ''
```

## Common Pitfalls to Avoid
- Don't log sensitive data (tokens, passwords)
- Always validate tokens before API calls
- Don't use magic numbers - define constants
- Don't leave blank lines within method bodies
- Always handle specific error cases before generic ones
- Use dependency injection instead of direct instantiation

## Module Organization
```typescript
@Module({
  imports: [ConfigModule, HttpModule],
  controllers: [Controller],
  providers: [
    Service,
    { provide: 'PortName', useClass: AdapterImplementation },
  ],
  exports: [Service],
})
```

## Domain Entities Structure
- Order: Central entity with externalId, orderNumber, items[], customer, shipping, payment
- Relationships: Order 1:N OrderItem, Order 1:1 Customer/Shipping/Payment
- Customer 1:1 Address
- All entities are plain TypeScript types (not classes)

## Current Focus Areas
1. **Testing**: Implement comprehensive test suite
2. **Documentation**: Add Swagger/OpenAPI docs
3. **Health Checks**: Add system health monitoring
4. **Error Recovery**: Implement retry logic and circuit breakers

## Memory Bank Integration
The project uses a comprehensive Memory Bank system in `memory-bank/` directory:
- `projectbrief.md`: Core project information
- `productContext.md`: Business context and requirements  
- `systemPatterns.md`: Architecture and technical patterns
- `techContext.md`: Technology stack and setup
- `activeContext.md`: Current work focus
- `progress.md`: Detailed progress tracking

Always consult Memory Bank files when starting new work or when context is needed. 